- Cho một số nguyên dương n <= 30. Hãy tìm tất cả các cách phân tích
số n thành tổng của các số nguyên dương , các cách phân tích số là 
hoán vị của nhau chỉ tính là một cách. 
     3 = 1 + 2 = 2+ 1 sẽ chỉ được tính là một cách. 

- Cách làm : 
1. Ta sẽ lưu nghiệm trong mảng x, ngoài ra có một mảng t. Mảng t xây 
dựng như sau : 

   + t_i sẽ là tổng các phần tử trong mảng x từ x1 đến xi 
   + t_i = x1+ x2 + x3 + x4 +..+ xi

2. Khi liệt kê các dãy x có tổng các phần tử đúng bằng n  , để tránh sự 
trùng lặp ta sẽ đưa thêm ràng buộc x_(i-1) <= x_i 

3. Vì số phần tử thực sự của mảng x là không cố định nên thủ tục OUT_PUT dùng để in 
một cách phân tích phải có thêm tham số cho biết sẽ in ra bao nhiêu phần tử. 

4. Thủ tục đệ quy Try(i) sẽ thử các giá trị có thể nhận được x_i (x_i >= x_(i-1))

5. Khi nào thì in kết quả và khi nào thì đệ quy tìm tiếp 

- Lưu ý rằng t_(i-1)  là tổng của tất cả các phần tử từ x_1 đến x_(i-1) , do đó: 

+ Khi t_i = n tức là x_i = n - t_(i-1) thì in kết quả. 


- Ví dụ : 
       3 = 1 + 2 
       3 = 2 + 1 
- Để giải quyết việc tránh bị trùng lặp thì nghiệm ở sau phải >= nghijem 
ở trước nó :   x[1] <= x[2]  


       x[1,2,3,4,5,6] 

       mảng t[i=2] = x[1]+ x[2] = 5 

       t[2] = 5 => 5 = 2 + 3 

       PrintKetQua(i = 2 ) in các phần tử từ vị trí số 1 đến vị trí i =2 
      t[i] =x[1] + ...+ x[i];

      t[i+1] = t[i] +x[i+1]

    VD  n = 5 
    5 = 2 + 2 + 1 
    x[1] = 2 => t[1] = 2; 
    x[2] = 3 <= (n - t[i-1]) / 2 => IN KẾT QUẢ 

    x[2+1] = x[2] 
    x[1,1,1,1,1] 
    t[2+1] = t[2] + x[2+1] 


- Để tránh được sự trùng lặp : 

+ Nghiệm tiếp theo x[i+1]  >= Nghiệm hiện tại x[i] để tránh sự trùng lặp. 

+ Tổng các nghiệm hiện tại + Nghiệm tiếp theo <= n 
    x1+ x2 +.....+ x_i
          t[i]             + x[i+1]           <= n

+ Tổng các nghiệm hiện tại + Nghiệm tiếp theo  > n 
=> Nghiệm tiếp theo    = n - Tổng các nghiệm hiện tại. 


   t[i]                   +         x[i+1]      <= n; 
 
x1 +...+ x_(i-1) +x_i     +         x[i+1]      <= n 

   t_(i-1)       +x_i     +         x[i+1]      <= n 

mà x[i+1] >= x[i] tức là cái x[i] có thể thay thế đc x_(i+1) mà không 
làm ảnh hưởng gì đến dấu của bài toán 
=> t_(i-1)      + 2 x_i    <= n  

<=> t_(i -1)    -  t_(i-1)   +  2 x_i   <= n - t_(i-1) 

<=>  2 X_i   <= n - t_(i-1)

<=>    x_i   <= (n - t_(i-1)) / 2  




#include<bits/stdc++.h>
using namespace std;

int n;

int * x;

int *t;
void IN_KET_QUA (int k){
    cout << n <<" = ";
    for(int i = 1; i< k ;i++){
        cout << x[i] << " + ";
    }
    cout<< x[k]<<endl;
}
void Try(int i){
    for(int j = x[i]; j <= (n - t[i]) / 2 ; j++){
        x[i+1] = j;
        t[i+1] = t[i] + x[i+1];

        Try(i+1);
    }
    - Không thỏa điều kiện - 
    x[i+1] = n - t[i];
    IN_KET_QUA(i +1);
}

int main(){
    cout <<"\nNhap n : "; 
    cin >> n; 
    x = new int[n +1];
    t = new int[n +1];

    x[0]  =  1;
    Try(0);

}


x[1,1,0,0,0,0];    1 <= ( 2 -1 )

Try(0){ 

     nếu x[0] thỏa điều kiện đưa ra 
     x[i+1] =  x[0];
     t[i+1] = t[i] + x[i+1];
     Try(i+1);

    nếu không thỏa 
    x[i+1] = n - t[i];
    IN_KET_QUA(i);
       
}

------------------------------------------------------------------ 
PHÂN TÍCH SỐ : 

- Dòng đầu là số lượng test_case 
- Các dòng tiếp theo là các số a
- Sau đó chúng ta sẽ in ra, phân tích các số ra thành từng kết quả. 

2 
4 
5

4 
3 1 
2 2 
2 1 1 
1 1 1 1


5
4 1 
3 2
3 1 1 
2 2 1
2 1 1 1 
1 1 1 1 1 

- Ta nhận thấy: 
  + Các cấu hình có kích thước khác nhau, điều này tùy thuộc vào tổng
hiện tại của cấu hình đó. 
  + cấu hình luôn có kích thước <= a và giá trị của nó cũng giảm dần
từ giá trị to về giá trị bé. 
  + Giá trị bé nhất là 1, Giá trị lớn nhất là a 
  + Để đảm bảo các hoán vị phân tích só không bị trùng lặp thì số đằng trước 
phải lớn hơn số đằng sau.

int n;
int a[11];

void IN_CAU_HINH(int i) {
    for (int j = 0; j < i; j++) {
        cout << a[j] << " ";
    }
    cout << endl;
}

void Try_Xuoi(int i, int current_sum) {
    for (int j = 1; j <= n; j++) { // Thử từ 1 đến n
        if (current_sum + j <= n) {
            a[i] = j;
            current_sum += j;
            if (current_sum == n) {
                IN_CAU_HINH(i + 1); // in ra i + 1 phần tử vì đã thêm phần tử a[i]
            } else {
                Try_Xuoi(i + 1, current_sum);
            }
            current_sum -= j; // backtrack để thử giá trị tiếp theo
        }
    }
}

void Try_Nguoc(int i,int current_sum){
    for(int j =n; j>= 1;j--){
        if(current_sum+ j <= n){
            a[i] = j;
            current_sum += j;
            if (current_sum == n) {
                IN_CAU_HINH(i + 1); // in ra i + 1 phần tử vì đã thêm phần tử a[i]
            } else {
                Try_Nguoc(i + 1, current_sum);
            }
            current_sum -= j; 
        }
    }
}

int main() {
    int test;
    cin >> test;

    while (test--) {
        cin >> n;
        memset(a, 0, sizeof(a)); // Khởi tạo lại mảng a
        Try_Nguoc(0, 0);
    }
    return 0;
}


void Try_Nguoc(int i,int current_sum){
    for(int j =n; j>= 1;j--){
        if(current_sum+ j <= n){
            a[i] = j;
            current_sum += j;
            if (current_sum == n) {
                IN_CAU_HINH(i + 1); // in ra i + 1 phần tử vì đã thêm phần tử a[i]
            } else {
                Try_Nguoc(i + 1, current_sum);
            }
            current_sum -= j; 
        }
    }
}

IN_CAU_HINH(i){
    -CHẠY IN TỪ 0 ĐẾN i-1- 
    1.CHẠY TỪ 0 ĐẾN 0 THÌ PHẦN TỬ a[0] được in ra 

}

Try_Nguoc(0,0){
    j = 4;
         if(current_sum = 0 + 4 <= 4){
            a[0] = 4;
            current_sum += 4 = 4;
            if(current_sum == n == 4){
                IN_CAU_HINH(i+1); (1)
            }
            current_sum-=4 = 0;
         }
         - KẾT THÚC -

    j = 3;
        if(current_sum = 0 + 3 <= 4){
            a[0] = 3;
            current_sum +=3; 
            Try(i+1,3)
                     j = 4; 
                          - KHÔNG THỎA IF TO -
                     j = 3;
                          - KHÔNG THỎA IF TO - 
                     j = 2;
                          - KHÔNG THỎA IF TO - 
                     j = 1;
                          if(current_sum = 3 + 1 <= 4){
                            a[1] = 1;
                            current_sum += 1  =4;
                            if(current_sum == n){
                                IN_CAU_HINH :
                            }
                          }
                     - KẾT THÚC - 
        }

    j = 2;


    j= 1; 


    - KẾT THÚC- 
}



                          

                 1                      2                   3
  
            2        3               1     3            1      2

        3               2        3            1       2          1 


      KIỂM TRA XEM SỐ ĐÃ ĐƯỢC ĐÁNH DẤU SỬ DỤNG CHƯA - 
1 được thêm vào cấu hình.  i = 0 
      1 được đánh dấu đã sử dụng 

2 được thêm vào cấu hình: i = 1; 
      2 được đánh dấu đã sử dụng 

3 được thêm vào cấu hình : i = 2
      3 được đánh dấu đã sử dụng 

      VÌ (i == n - 1)
      IN_RA: 1  2  3    
      3 được đánh giá là đã qua sử dụng 