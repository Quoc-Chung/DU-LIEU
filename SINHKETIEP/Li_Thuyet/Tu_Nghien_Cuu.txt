- THUẬT TOÁN SINH KẾ TIẾP: 
       + NÓ LIÊN TỤC SINH RA CÁC CẤU HÌNH KẾ TIẾP NHAU THEO MỘT QUY 
       TẮC NHẤT ĐỊNH , KHÔNG BỎ XÓT CẤU HÌNH NÀO 
       + ĐẢM BẢO TẤT CẢ CÁC CẤU HÌNH ĐỀU ĐƯỢC SINH RA MỘT CÁCH TUẦN tự 


- Thuật toán sinh kế tiếp dùng để giải quyết các bài toán thỏa mãn
điều kiện: 
+ Xác định trật tự các nghiệm (Liệt kê nhị phân, hoán vị, tổ hợp, phân tích tổng ,..)

+ Chúng ta biết được nghiệm đầu và nghiệm cuối cùng 

+ Xây dựng được thuật toán từ một nghiệm ( cấu hình ) chưa phải là nghiệm cuối cùng ta đều 
sinh ra một cấu hình đứng sau nó 


- CÁC BƯỚC GIẢI QUYẾT BÀI TOÁN: 

+ Xây dựng cấu hình đầu tiên 

+ While(- Chưa phải cấu hình cuối cùng -){
    <Đưa ra cấu hình hiện tại> 

    <Sinh ra cấu hình kế tiếp>

}

3
000
001
010
011
100
101
110
111


- Liệt kê dãy nhị phân có độ dài biết trước: 
1. Dễ dàng xác định được cấu hình đầu tiên và cấu hình cuối cùng là : 
       +   0000...0(- Độ dài n -)
       +   1111...1(- Độ dài n -)

       + Để xác định được dãy nhị phân đứng sau thì ta lấy dãy nhị phân 
       hiện tại + 1(bit 1) 

       + Ví dụ : Dãy nhị phân hiện tại 000 --> dãy kế tiếp 
                    000 
                +     1 
                    001
2.Xây dựng thuật toán sinh kế tiếp : 
       + Khởi tạo dãy nhị phân ban đầu là 000..0 
               void KhoiTao(){
                    for(int i=1;i<=n;i++){
                        a[i] = 0;
                    }
               }
       + Duyệt dãy nhị phân từ cuối :
            + nếu gặp bit n là bit 1 thì thay nó bằng bit 0 
             và lặp sang bên trái. 
            + nếu gặp bit n là bit 0 thì chuyển nó thành bit 1 
            và kết thúc , còn những thằng còn lại cứ copy sang là được 
              
                          n
            +   0    0    0 
                0    0    1  - Ta thấy rằng gặp 0 thì chuyển nó thành 1 và kết thúc - 
                             ( Cứ gặp 0 thì chắc chắn 00)
                          
                0    1    0  - Ta thấy rằng gặp 1 thì chyển nó thành 0 và lệch sang trái 
                             túc tiếp. 
                             (Nói chung là phải gặp 0 thì mới chuyển nó thành 1 và được một 
                             cấu hình nhó )

- Duyệt nó từ cuối cùng - 
- Vòng lặp sẽ kết thúc nếu gặp bit 0 hoặc duyệt đến bit cuối cùng, tức là i sẽ chuyển đến bit 
trước bit  0 đầu tiên tức là i < 0 ( ban đầu  ta sẽ đặt i là bit cuối cùng );

- Khi mà i chuyển i đến đầu tiên thì chúng ta sẽ không sinh kế tiếp nữa 

 int i = n - 1;
    while(i >= 0 && a[i] == 1){
        a[i] = 0;
        i--;
    }
    - Ở bên trên này thì vòng lặp while nó sẽ kiểm tra xem tại vị trí i thì a[i] mà bằng 1 thì nó 
    sẽ là 1 và lệch sang trái và khi nó gặp 1 bit 0 tại vị trí i thì chắc chắn vòng lặp while sẽ dừng 
    và tại vị trí này nếu chưa phải cấu hình cuối cùng thì ta sẽ chuyển nó thành 1. 


    if(i < 0){
        isFinal = false;
    } else {
        a[i] = 1;
    }    


    while(isFinal){
        for(int i = 0; i < n; i++){
            cout << a[i];
        }
        cout << endl;
        Sinh();
    }  


--------------------------------------------------------------------------

- Thuật toán sinh kế tiếp được gọi như vậy vì nó sinh ra các cấu hình: 
    + các tổ hợp 
    + các hoán vị 
    + dãy nhị phân 

theo thứ tự , từ cấu hình đầu tiên đến cấu hình cuối cùng , bằng cách 
chuyển từ cấu hình hiện tại sang cấu hình tiếp theo. 

=> THUẬT TOÁN SINH KẾ TIẾP : 
    + SINH TỪ CẤU HÌNH ĐẦU TIÊN ĐẾN CẤU HÌNH CUỐI CÙNG 
    + SINH TỪ CẤU HÌNH HIỆN TẠI SANG CẤU HÌNH TIẾP THEO. 


- Với thuật toán sinh hoán vị, bạn có thể thấy rõ việc chuyển từ hoán 
vị hiện tại sang hoán vị kế tiếp được thực hiện theo các bước xác định 
và không bỏ xót hoán vị nào. 


- Một hoán vị là một sắp xếp lại của các phần tử trong một dãy. 
- Ví dụ với dãy {1,2,3} , các hoán vị của dãy này là : 
        1 2 3
        1 3 2
        2 1 3
        2 3 1
        3 1 2
        3 2 1
+ Khởi tạo hoán vị đầu tiên là dãy sắp xếp tăng dần: 
        1 2 3 
+ Sinh hoán vị tiếp theo, tìm hoán vị kế tiếp của dãy hiện tại theo một 
quy tắc nhất định.

+ Cụ thể thuật toán: 
    + Tìm phần tử lớn nhất có thể di chuyển (theo dấu của nó) 
    + Đổi chỗ phần tử này với phần tử đứng ngay cạnh nó theo hướng 
    dấu của nó. 
    + Đảo ngược dấu của tất cả các phần tử lớn hơn phần tử vừa được 
    di chuyển. 



Khởi đầu với hoán vị {1, 2, 3} và dấu + + +.



Hoán vị đầu tiên: {1, 2, 3}.

Tìm phần tử lớn nhất có thể di chuyển:

Ở đây, 3 có thể di chuyển (dấu + hướng về phía phải).
Di chuyển phần tử:

Đổi chỗ 3 với 2 → hoán vị mới: {1, 3, 2} và dấu + + +.
Đảo ngược dấu của phần tử lớn hơn:

Đảo ngược dấu của 3 → dấu mới: + - +.
Tiếp tục với các bước tương tự cho các hoán vị kế tiếp:
Hoán vị kế tiếp: {1, 3, 2}.

3 có thể di chuyển sang trái (dấu -).
Đổi chỗ 3 với 1 → hoán vị mới: {3, 1, 2} và dấu - - +.
Đảo ngược dấu của 3 → dấu mới: + - +.
Hoán vị kế tiếp: {3, 1, 2}.

2 có thể di chuyển sang phải (dấu +).
Đổi chỗ 2 với 1 → hoán vị mới: {3, 2, 1} và dấu + - -.
Đảo ngược dấu của 3 → dấu mới: - - - 


-------------------------------------------------------------------- 

- Cho hai số n và k và yêu cầu sinh ra tổ hợp chập k của n : 

n = 5  k = 3 
  1  2  3  => Tất cả các tổ hợp bắt đầu từ 1  2 3 
  1  2  4
  1  2  5  
  1  3  4 
  1  3  5 
  1  4  5
  2  4  5 
  2  3  4 

- Cấu hình đầu tiên  : 1  2  3 (tức là các số từ 1 cho đến 3 )

- Cấu hình cuối cùng : k số lớn nhất (3 , 4 , 5 ) 
           n  = 10 , k = 4 

           1 2 3 4   =>  1 , 2 , 3 , k 


           7 8 9 10  =>  n -k + 1 , n- k + 2, n - k + 3 , n - k + k 
           => Ở mỗi cấu hình thì tại vị trí i sẽ chỉ đạt được tối 
           đa một giá trị lớn nhất. 
- VỚI N = 10  VÀ K = 4  
 + Tại vị trí 1 của cấu hình phần tử đạt giá trị max là 7 (N - K + 1)

 + Tại vị trí 2 của cấu hình phần tử đạt giá trị max là 8 (N - K + 2) 

 + Tại vị trí 3 của cấu hình phần tử đạt giá trị max là 9 (N - K + 3) 

 + Tại vị trí i của cấu hình phần tử đạt giá trị max là    N - K + i

 1  -> K thì mỗi phần tử của vị trí i sẽ có giá trị max là n - k + i
    -> Khi mà tất cả các cái bit đều có công thức là N - K + i thì chứng 
    tỏ đây là cấu hình cuối cùng. 


K = 3 , N = 5 

1  2  3 

+ Bắt đầu từ bit cuối cùng , xem thằng 3 đã đạt cái giá trị max mà nó 
có thể đạt được hay chưa , tức là N - K +  3  = 5 - 3 + 3 = 5 thì sẽ 
tăng cái thằng đó lên. 
    
1  2  4 

1  2  5 

+ Khi xét tại vị trí i = 3 thì nhận thấy thằng tại vị trí 3 đã đạt được giá
trị lớn nhất rồi nên ta sẽ dịch bit sang bên trái  để tìm bit tiếp theo để 
nó tăng. 

1  3  4 

1  3  5 

i + 1 => k sẽ tăng dần lên một đơn vị 

int n, k , a[100] , ok; - Biến ok để check cấu hình cuối cùng. 

void  KhoiTao(){
    for(int i = 1; i <=k ;i++){
        a[i] = i;
    }
}
void Sinh(){
    int i = k;
    ( n - k + i )

    i >=1 để cho cái i nó không bị chệch ra khỏi khung hình  
    a[i] == n - k + i thì tức là nếu nó chưa phải là cấu hình cuối cùng thì 
    chúng ta không thể tiến hành dịch bit mà phải tăng đến khi nào cục cái 
    bit đó đi rồi chúng ta mới dịch sang trái 

    - Và khi dịch sang trái thì cái số trước sẽ lớn hơn cái số sau 

    1 2 3 
    1 2 4 
    1 2 5

    1 3 4
    1 3 5 

    1 4 5
    2 3 4 
    2 3 5 
    2 4 5
    3 4 5 
    

    while(i >= 1 && a[i] == n - k + i){
        --i;
    }
    if( i == 0){
        ok = 0; - Đây là cấu hình cuối cùng -
    }
    else{
        a[i]++; 
        for(int j = i +1 ; j <= k ; j++){
            a[j] = a[j-1] + 1;
        }
    }
}

int main(){
    cin >> n >> k ;
    while(ok){
        for(int i = 1; i <=k ;i++){
            cout << a[i];
        }
        Sinh();
    }
}


    




